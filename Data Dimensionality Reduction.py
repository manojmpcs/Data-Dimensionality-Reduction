import tkinter as tk
from tkinter import*
from spectral import*
import spectral.io.envi as envi
from tkinter.filedialog import askopenfilename      
def s5():
        t.destroy()
        t2=Toplevel(root)
        t2.title("PCA")
        t2.resizable(width=False,height=False)
        l=txtVar.get()
        f=txtVar4.get()
        j=txtVar11.get()
        g=open(j+".txt",'w')
        g.write("Mean Value:\n")
        count=1
        for k1 in pc.mean:
            g.write("Band")
            g.write(str(count))
            g.write("\t")
            g.write(str(k1))
            g.write("\n")
            count=count+1
        g.write("\n")    
        g.write("EigenValues:\n")
        count=1
        for k2 in pc.eigenvalues:
            g.write("Band")
            g.write(str(count))
            g.write("\t")
            g.write(str(k2))
            g.write("\n")
            count=count+1
        g.write("\n")    
        g.write("Covariance:\n")
        count=1
        for k3 in pc.cov:
            g.write("Band")
            g.write(str(count))
            g.write("\t")
            g.write("\t")
            g.write(str(k3))
            g.write("\n")
            g.write("\n")
            count=count+1
        g.close()    
        d=int(l)
        pc_0999 = pc.reduce(num=d)
        img_pc = pc_0999.transform(mylib)
        envi.save_image(f+".hdr",img_pc)
        widget = Label(t2, text='Successfully Completed') 
        widget.pack()
        widget.mainloop()
def s1():
    t3.destroy()
    t2=Toplevel(root)
    t2.title("MNF")
    t2.resizable(width=False,height=False)
    d=txtVar2.get()
    r=txtVar3.get()
    f1=txtVar5.get()
    j=txtVar9.get()
    g=open(j+".txt",'w')
    g.write("Mean Value:\n")
    count=1
    for k1 in pc.mean:
        g.write("Band")
        g.write(str(count))
        g.write("\t")
        g.write(str(k1))
        g.write("\n")
        count=count+1
    g.write("\n")    
    g.write("EigenValues:\n")
    count=1
    for k2 in pc.eigenvalues:
        g.write("Band")
        g.write(str(count))
        g.write("\t")
        g.write(str(k2))
        g.write("\n")
        count=count+1
        g.write("\n")    
    g.write("Covariance:\n")
    count=1
    for k3 in pc.cov:
        g.write("Band")
        g.write(str(count))
        g.write("\t")
        g.write("\t")
        g.write(str(k3))
        g.write("\n")
        g.write("\n")
        count=count+1
    g.close()
    s=int(d)
    f=float(r)
    signal = calc_stats(mylib)
    noise = noise_from_diffs(mylib[117: 137, 85: 122, :])
    pc1 = mnf(signal, noise)
    denoised = pc1.denoise(mylib,snr=f)
    pc_0999 = pc1.reduce(mylib,num=s)
    img_pc = pc_0999.transform(mylib)
    envi.save_image(f1+".hdr",img_pc)
    j=txtVar10.get()
    g=open(j+".txt",'w')
    h=txtVar3.get()
    g.write("SNR Ratio:  ")
    g.write(h)
    g.write("\n")
    g.write("Mean Value:\n")
    count=1
    for k1 in noise.mean:
        g.write("Band")
        g.write(str(count))
        g.write("\t")
        g.write(str(k1))
        g.write("\n")
        g.write("\n")
        count=count+1
    g.write("\n")        
    g.write("Covariance:\n")
    g.write("\n")
    count=1
    for k3 in noise.cov:
        g.write("Band")
        g.write(str(count))
        g.write("\t")
        g.write("\t")
        g.write(str(k3))
        g.write("\n")
        g.write("\n")
        count=count+1
    g.close()
    widget = Label(t2, text='Successfully Completed') 
    widget.pack()
    widget.mainloop()
def OnDouble(t):  
        location = lb.curselection()[0]
        value=lb.get(location)
        s=sf[value]
        l=gt.read_band(s)
        cview = imshow(classes=l)    
def pee(t):
    location=lb1.curselection()[0]
    value=lb1.get(location)
    s=sf1[value]
    txtVar2.set(s)
def pee1(t):
    location=lb2.curselection()[0]
    value=lb2.get(location)
    s=sf2[value]
    txtVar.set(s)
def yes(nbands):
    global t
    t=Toplevel(root)
    t.geometry("500x370")
    t.resizable(width=False, height=False)
    t.title("PCA")
    v = StringVar()
    Label(t, textvariable=v,font = ('Times New Roman', 12, 'bold')).place(x=10,y=0)
    v.set("Total number of bands in image: ")
    v6 = StringVar()
    Label(t, textvariable=v6,font = ('Times New Roman', 14, 'bold'),fg='red').place(x=235,y=0)
    d=str(nbands)
    v6.set(d)
    v3=StringVar()
    k=tk.Label(t, textvariable=v3,font = ('Times New Roman',10))
    k.place(x=10,y=40)
    v3.set("Enter the output file name( Without Extension ):")
    global txtVar4
    txtVar4 = StringVar(None)
    usrIn = Entry(t, textvariable = txtVar4, width =20)
    usrIn.place(x=300,y=40)
    v1=StringVar()
    Label(t, textvariable=v1,font = ('Times New Roman',10)).place(x=10,y=80)
    v1.set("Enter the no. of components desired:**")
    v7 = StringVar()
    Label(t, textvariable=v7,font = ('Times New Roman', 10)).place(x=85,y=100)
    v7.set("(<=No. of input band )")
    global txtVar
    txtVar = StringVar(None)
    usrIn = Entry(t, textvariable = txtVar, width =20)
    usrIn.place(x=300,y=80)
    global pc
    pc = principal_components(mylib)
    v7=StringVar()
    Label(t, textvariable=v7,font = ('Times New Roman',10)).place(x=10,y=140)
    v7.set("Select the no. of components based on eigen values:")
    global lb2
    lb2=Listbox(t, width=13,height=7)
    scrollbar =tk.Scrollbar(t,command=lb2.yview,orient="vertical")
    scrollbar.place(x=380,y=140,height=117)
    global sf2
    sf2=dict()
    count=1
    for l in pc.eigenvalues:
            g = float("{0:.10f}".format(l))
            s=str(g)
            sf2[s]=count
            lb2.insert(END,s)
            count=count+1
    lb2.place(x=300,y=140)        
    lb2.configure(yscrollcommand=scrollbar.set)
    lb2.bind("<<ListboxSelect>>",pee1)
    v8 = StringVar()
    Label(t, textvariable=v8,font = ('Times New Roman', 10)).place(x=10,y=290)
    v8.set("Enter the output statistics file name:")
    global txtVar11
    txtVar11 = StringVar(None)
    usrIn = Entry(t, textvariable = txtVar11, width =20)
    usrIn.place(x=300,y=290)
    button = tk.Button(t, text="Cancel",command=t.destroy)
    button.place(x=350,y=345)
    button = tk.Button(t, text="OK",command=s5)
    button.place(x=300,y=345)
def yes2(nbands):
    global t3
    t3=Toplevel(root)
    t3.geometry("500x450")
    t3.resizable(width=False, height=False)
    t3.title("MNF")
    v = StringVar()
    Label(t3, textvariable=v,font = ('Times New Roman', 12, 'bold')).place(x=10,y=0)
    v.set("Total number of bands in image: ")
    v6 = StringVar()
    Label(t3, textvariable=v6,font = ('Times New Roman', 14, 'bold'),fg='red').place(x=235,y=0)
    d=str(nbands)
    v6.set(d)
    v3=StringVar()
    k=tk.Label(t3, textvariable=v3,font = ('Times New Roman',10))
    k.place(x=10,y=40)
    v3.set("Enter the output file name( Without Extension ):")
    global txtVar5
    txtVar5 = StringVar(None)
    usrIn = Entry(t3, textvariable = txtVar5, width =20)
    usrIn.place(x=300,y=40)
    v1=StringVar()
    Label(t3, textvariable=v1,font = ('Times New Roman',10)).place(x=10,y=80)
    v1.set("Enter the no. of components desired:**")
    v7 = StringVar()
    Label(t3, textvariable=v7,font = ('Times New Roman', 10)).place(x=85,y=100)
    v7.set("(<=No. of input band )")
    global txtVar2
    txtVar2 = StringVar(None)
    usrIn = Entry(t3, textvariable = txtVar2, width =20)
    usrIn.place(x=300,y=80)
    v2=StringVar()
    Label(t3, textvariable=v2,font = ('Times New Roman',10)).place(x=10,y=140)
    v2.set("Enter SNR ratio: ")
    global txtVar3
    txtVar3 = StringVar(None)
    usrIn = Entry(t3, textvariable = txtVar3, width =20)
    usrIn.place(x=300,y=140)
    pc = principal_components(mylib)
    v7=StringVar()
    Label(t3, textvariable=v7,font = ('Times New Roman',10)).place(x=10,y=180)
    v7.set("Select the no. of components based on eigen values:")
    global lb1
    lb1=Listbox(t3, width=13,height=7)
    scrollbar =tk.Scrollbar(t3,command=lb1.yview,orient="vertical")
    scrollbar.place(x=380,y=180,height=117)
    global sf1
    sf1=dict()
    count=1
    for l in pc.eigenvalues:
            g = float("{0:.10f}".format(l))
            s=str(g)
            sf1[s]=count
            lb1.insert(END,s)
            count=count+1
    lb1.place(x=300,y=180)        
    lb1.configure(yscrollcommand=scrollbar.set)
    lb1.bind("<<ListboxSelect>>",pee)
    v8 = StringVar()
    Label(t3, textvariable=v8,font = ('Times New Roman', 10)).place(x=10,y=330)
    v8.set("Enter the output statistics file name:")
    global txtVar9
    txtVar9 = StringVar(None)
    usrIn = Entry(t3, textvariable = txtVar9, width =20)
    usrIn.place(x=300,y=330)
    v9 = StringVar()
    Label(t3, textvariable=v9,font = ('Times New Roman', 10)).place(x=10,y=370)
    v9.set("Enter the noise output statistics file name of:")
    global txtVar10
    txtVar10 = StringVar(None)
    usrIn = Entry(t3, textvariable = txtVar10, width =20)
    usrIn.place(x=300,y=370)
    button = tk.Button(t3, text="Cancel",command=t3.destroy)
    button.place(x=350,y=415)
    button = tk.Button(t3, text="OK",command=s1)
    button.place(x=300,y=415)
def donothing():
    filewin=Toplevel(root)
    button=Button(filewin,text="Do nothing button")
    button.pack()  
def pcatxt():
    t3=Toplevel(root)
    t3.title("Principal Component Analysis")
    t3.geometry("600x210")
    t3.resizable(width=False,height=False)
    v1=StringVar()
    Label(t3,textvariable=v1,font = ('Times New Roman',10)).pack()
    v1.set("The main linear technique for dimensionality reduction, principal component analysis, performs a")
    v2=StringVar()
    Label(t3,textvariable=v2,font = ('Times New Roman',10)).pack()
    v2.set("linear mapping of the data to a lower-dimensional space in such a way that the variance of the data")
    v3=StringVar()
    Label(t3,textvariable=v3,font = ('Times New Roman',10)).pack()
    v3.set("in the low-dimensional representation is maximized. In practice, the covariance (and sometimes the")
    v4=StringVar()
    Label(t3,textvariable=v4,font = ('Times New Roman',10)).pack()
    v4.set("correlation) matrix of the data is constructed and the eigen vectors on this matrix are computed.")
    v5=StringVar()
    Label(t3,textvariable=v5,font = ('Times New Roman',10)).pack()
    v5.set("The eigen vectors that correspond to the largest eigenvalues (the principal components) can now be")
    v6=StringVar()
    Label(t3,textvariable=v6,font = ('Times New Roman',10)).pack()
    v6.set("used to reconstruct a large fraction of the variance of the original data. Moreover, the first few")
    v7=StringVar()
    Label(t3,textvariable=v7,font = ('Times New Roman',10)).pack()
    v7.set("eigen vectors can often be interpreted in terms of the large-scale physical behavior of the system.")
    v8=StringVar()
    Label(t3,textvariable=v8,font = ('Times New Roman',10)).pack()
    v8.set("The original space (with dimension of the number of points) has been  reduced (with data loss, but")
    v9=StringVar()
    Label(t3,textvariable=v9,font = ('Times New Roman',10)).pack()
    v9.set("hopefully retaining the most important variance) to the space spanned by a few eigenvectors.")
def ddrtxt():
    t3=Toplevel(root)
    t3.title("What is data dimensionality reduction")
    t3.geometry("600x170")
    t3.resizable(width=False,height=False)
    v1=StringVar()
    Label(t3,textvariable=v1,font = ('Times New Roman',10)).pack()
    v1.set("Dimensionality reduction is all about transforming data into a low-dimensional space in which data")
    v2=StringVar()
    Label(t3,textvariable=v2,font = ('Times New Roman',10)).pack()
    v2.set("preserves its euclidean structure but does not suffer from curse of dimensionality. For instance ")
    v3=StringVar()
    Label(t3,textvariable=v3,font = ('Times New Roman',10)).pack()
    v3.set("assume you extract some word features [x1,...,xn][x1,...,xn] from a data set where each document can")
    v4=StringVar()
    Label(t3,textvariable=v4,font = ('Times New Roman',10)).pack()
    v4.set("be modeled as a point in n-dimensional space and n is too large (a toy example). In this case many")
    v5=StringVar()
    Label(t3,textvariable=v5,font = ('Times New Roman',10)).pack()
    v5.set("algorithms do not work according to the distance distortion of high-dimensional space. Now you ")
    v6=StringVar()
    Label(t3,textvariable=v6,font = ('Times New Roman',10)).pack()
    v6.set("need to reduce dimensionality by either selecting most informative features or transforming them ")
    v7=StringVar()
    Label(t3,textvariable=v7,font = ('Times New Roman',10)).pack()
    v7.set("into a low-dimensional manifold using dimensionality reduction methods e.g. PCA, MNF, etc.") 
def mnftxt():
    t3=Toplevel(root)
    t3.title("Minimum Noise Fraction")
    t3.geometry("600x180")
    t3.resizable(width=False,height=False)
    v1=StringVar()
    Label(t3,textvariable=v1,font = ('Times New Roman',10)).pack()
    v1.set("The bands in a hyperspectral dataset have differing noise levels (S/N). It may be desirable to ")
    v2=StringVar()
    Label(t3,textvariable=v2,font = ('Times New Roman',10)).pack()
    v2.set("filter or remove those bands that contribute most to noise. When the bands of a hyperspectral ")
    v3=StringVar()
    Label(t3,textvariable=v3,font = ('Times New Roman',10)).pack()
    v3.set("dataset have differing amounts of noise, a standard principal components (PC) transform will not")
    v4=StringVar()
    Label(t3,textvariable=v4,font = ('Times New Roman',10)).pack()
    v4.set("produce components with a steadily increasing noise level. This makes it difficult to select a ")
    v5=StringVar()
    Label(t3,textvariable=v5,font = ('Times New Roman',10)).pack()
    v5.set("cutoff point. To achieve a components dataset that does have increasing noise (decreasing S/N), a")
    v6=StringVar()
    Label(t3,textvariable=v6,font = ('Times New Roman',10)).pack()
    v6.set("modified PC transform, termed the Minimum Noise Fraction (MNF) has been developed (Green et ")
    v7=StringVar()
    Label(t3,textvariable=v7,font = ('Times New Roman',10)).pack()
    v7.set("al. 1988, Lee et al. 1990). The MNF transform produces a set of principal component images ")
    v8=StringVar()
    Label(t3,textvariable=v8,font = ('Times New Roman',10)).pack()
    v8.set("ordered in terms of decreasing signal quality.")
def abtxt():
    t3=Toplevel(root)
    t3.title("About Software")
    t3.geometry("450x220")
    t3.resizable(width=False,height=False)
    v = StringVar()
    Label(t3, textvariable=v,font = ('Times New Roman', 12, 'bold')).place(x=10,y=0)
    v.set("Prepared By: ")
    v1 = StringVar()
    Label(t3, textvariable=v1,font = ('Times New Roman', 12, 'bold')).place(x=300,y=0)
    v1.set("Guided By: ")
    v2 = StringVar()
    Label(t3, textvariable=v2,font = ('Times New Roman', 12, 'bold'),fg='red').place(x=10,y=175)
    v2.set("Manoj Kumar")
    v3= StringVar()
    Label(t3, textvariable=v3,font = ('Times New Roman', 12, 'bold'),fg='red').place(x=10,y=195)
    v3.set("ECE ,Nit Hamirpur")
    v4 = StringVar()
    Label(t3, textvariable=v4,font = ('Times New Roman', 12, 'bold'),fg='red').place(x=300,y=175)
    v4.set("Vinay Kumar")
    v5 = StringVar()
    Label(t3, textvariable=v5,font = ('Times New Roman', 12, 'bold'),fg='red').place(x=300,y=195)
    v5.set("Scientist/Engineer")
    img = tk.PhotoImage(file="manoj.png")
    panel = tk.Label(t3,image = img)
    panel.place(x=10,y=40)
    img1 = tk.PhotoImage(file="Vinay-kumar.png")
    panel1 = tk.Label(t3,image = img1,width=100,height=130)
    panel1.place(x=300,y=40)
    panel.mainloop()
    panel1.mainloop()
def pcaf():
    name= askopenfilename() 
    global mylib
    mylib = envi.open(name)
    nbands = mylib.shape[-1]
    yes(nbands)
def mnff():
    name= askopenfilename() 
    global mylib
    mylib = envi.open(name)
    nbands = mylib.shape[-1]
    yes2(nbands)     
def open_image():
        t4=Toplevel(root)
        global gt 
        name = askopenfilename()
        gt = envi.open(name)
        nbands = gt.shape[-1]
        scrollbar = Scrollbar()
        global lb
        lb = tk.Listbox(t4,yscrollcommand=scrollbar.set)
        scrollbar.config(command=lb.yview)
        scrollbar.pack(side=RIGHT, fill=Y)
        global sf
        sf=dict()
        for l in range(nbands):
            s="Band "+str(l+1)
            sf[s]=l
            lb.insert(tk.END,s)      
        lb.pack(side="top", fill="both", expand=True)        
        lb.bind("<<ListboxSelect>>",OnDouble)     
root=tk.Tk()
root.geometry("400x300")
root.resizable(width=False, height=False)
root.title("Data Dimensionality Reduction")
menubar=Menu(root)
filemenu=Menu(menubar,tearoff=0)
filemenu.add_command(label="Image",command=open_image)
filemenu.add_separator()
filemenu.add_command(label="Exit",command=root.destroy)
menubar.add_cascade(label="File",menu=filemenu)
DDRmenu=Menu(menubar,tearoff=0)
PCA=Menu(DDRmenu,tearoff=0)
KernalPCA=Menu(DDRmenu,tearoff=0)
MNF=Menu(DDRmenu,tearoff=0)
ICA=Menu(DDRmenu,tearoff=0)
LDA=Menu(DDRmenu,tearoff=0)
menubar.add_cascade(label="DDR",menu=DDRmenu)
DDRmenu.add_command(label="PCA",command=pcaf)
DDRmenu.add_command(label="MNF",command=mnff)
helpmenu=Menu(menubar,tearoff=0)
helpmenu.add_command(label="DDR",command=ddrtxt)
helpmenu.add_command(label="PCA",command=pcatxt)
helpmenu.add_command(label="MNF",command=mnftxt)
menubar.add_cascade(label="Help",menu=helpmenu)
about=Menu(menubar,tearoff=0)
about.add_command(label="About Software",command=abtxt)
menubar.add_cascade(label="About",menu=about)
root.config(menu=menubar)
root.mainloop()




